priority_queue<int> maxh;
    priority_queue<int,vector<int>,greater<int>>minh;
    void addNum(int num) {
        if(maxh.empty() && minh.empty()){
            maxh.push(num);
        }
        else{
            if(maxh.top()<num) minh.push(num);
            else maxh.push(num);
        }
         
        //balancing the no of items!
        int n=maxh.size();
        int m=minh.size();

        if(n-m==2 || n-m==-2){
            if(n>m){
                int el=maxh.top();
                maxh.pop();
                minh.push(el);
            }
            else{
                int el=minh.top();
                minh.pop();
                maxh.push(el);
            }
        }
        
    }
    
    double findMedian() {
        int n=maxh.size();
        int m=minh.size();

        

        if((n+m)%2==0){
            return ((double)minh.top()+(double)maxh.top())/2.0;
        }
        if(n>m) return maxh.top();
        else return minh.top();
        
        
    }
