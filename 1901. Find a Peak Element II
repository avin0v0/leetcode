class Solution {
public:
    int findMax(vector<vector<int>> &arr,int n, int m, int col){
        int max_val=-1;
        int ind=-1;
        for(int i=0;i<n;i++){
            if(arr[i][col]>max_val){
                max_val=arr[i][col];
                ind = i;
            }
        }
        return ind;

    }
    vector<int> findPeakGrid(vector<vector<int>>& mat) {
        int n=mat.size();
        int m=mat[0].size();
        int low=0,high=m-1;
        while(low<=high){
            int mid = (high+low)/2;
            int RowInd=findMax(mat,n,m,mid);
            int left=mid-1 >= 0 ? mat[RowInd][mid-1] : -1;
            int right=mid+1 < m ? mat[RowInd][mid+1] : -1;

            //few conditions.....
            if(mat[RowInd][mid]>right && mat[RowInd][mid]>left)
            return {RowInd,mid};                    
            else if(mat[RowInd][mid]<left) high=mid-1;
            else low=mid+1;               
        }
        return {-1,-1};
        
    }
};
